{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","image","setImage","result","setResult","pageNumber","setPageNumber","pagesVisited","pageCount","Math","ceil","length","className","onChange","event","target","value","type","name","placeholder","to","onClick","alert","console","log","url","axios","get","then","response","data","results","slice","map","src","urls","thumb","alt","user","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRA8FeA,MApFf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAIeF,mBAAS,IAJxB,mBAING,EAJM,KAIEC,EAJF,OAKuBJ,mBAAS,GALhC,mBAKNK,EALM,KAKMC,EALN,KAOPC,EADgB,EACDF,EAEfG,EAAYC,KAAKC,KAAKP,EAAOQ,OAHb,GA6BtB,OACE,sBAAKC,UAAU,MAAf,UACA,qBAAKA,UAAU,UAAf,SACE,yDAGF,qBAAKA,UAAU,QAAf,SACE,uBAAOC,SA5BU,SAACC,GACpBZ,EAASY,EAAMC,OAAOC,QA2BWC,KAAK,OAAOC,KAAK,QAAUC,YAAY,wBAEvE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMC,GAAInB,EAAV,SACA,wBAAQoB,QA1BQ,WAKnBC,MAAMrB,GACNsB,QAAQC,IAAIvB,GACZ,IAAMwB,EAAM,uDAAyDxB,EAAzD,yDACZyB,IAAMC,IAAIF,GAAKG,MAAK,SAACC,GACnBN,QAAQC,IAAIK,GACZzB,EAAUyB,EAASC,KAAKC,aAgBQd,KAAK,SAApC,wBAIH,qBAAKL,UAAU,SAAf,SAECT,EACA6B,MAAMzB,EAAcA,EA/CD,GAgDnB0B,KAAI,SAAChC,GAAD,OACH,mCACA,qBAAKW,UAAU,OAAf,SACA,cAAC,gBAAD,CAEUsB,IAAKjC,EAAMkC,KAAKC,MAChBC,IAAG,uBAAkBpC,EAAMqC,KAAKpB,OAF3BjB,YAUf,uBACE,cAAC,IAAD,CACAsC,cAAe,WACfC,UAAW,OACXhC,UAAWA,EACXiC,aA9DW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClBpC,EAAcoC,IA8DVC,mBAAoB,kBACpBC,sBAAuB,eACvBC,kBAAmB,WACnBC,kBAAmB,qBACnBC,gBAAiB,yBC5EVC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad108dc5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport ReactPaginate from \"react-paginate\";\n//import queryString from 'query-string';\n//import {useHistory} from 'react-dom'\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\n\nfunction App() {\n\n  const [image, setImage] = useState(\"\");\n  const clientId = \"3Z85t9vwwMhnErqwt6mM2oJnDxgiTSMyRMSdcqVamV8\";\n  const [result, setResult] = useState([]);\n  const [pageNumber, setPageNumber] = useState(0);\n  const imagesPerPage = 5;\n  const pagesVisited = pageNumber * imagesPerPage;\n  \n  const pageCount = Math.ceil(result.length / imagesPerPage);\n\nconst changePage = ({ selected }) => {\n    setPageNumber(selected);\n };\n  const handleChange = (event) => {\n    setImage(event.target.value);\n  };\n\n  \n    \n  const handleSubmit = () => {\n    // let history = useHistory();\n    // let queries = queryString.parse(image);\n    // console.log(queries);\n    // history.pushState(queries);\n    alert(image);\n    console.log(image);\n    const url = \"https://api.unsplash.com/search/photos?page=1&query=\" + image + \"&client_id=\" + clientId;\n    axios.get(url).then((response) => {\n      console.log(response);\n      setResult(response.data.results);\n    });\n    \n  };\n\n  return (\n    <div className=\"app\">\n    <div className=\"heading\">\n      <h1>Image Search Project.</h1>\n    </div>\n    \n    <div className=\"input\">\n      <input onChange={handleChange} type=\"text\" name=\"image\"   placeholder=\"Search for images\"/>\n    </div>\n     <Router>      \n       <Link to={image} >\n       <button onClick={handleSubmit} type=\"submit\">Search</button>\n       </Link>\n     </Router>\n\n    <div className=\"result\">\n    \n    {result\n    .slice(pagesVisited, pagesVisited + imagesPerPage)\n    .map((image) => (\n      <>\n      <div className=\"card\">\n      <LazyLoadImage\n                key={image}\n                src={image.urls.thumb}\n                alt={`Random image ${image.user.name}`}\n      />\n      \n      </div>\n    \n      </>\n      ))}\n      </div>\n      <br></br>\n        <ReactPaginate\n        previousLabel={\"Previous\"}\n        nextLabel={\"Next\"}\n        pageCount={pageCount}\n        onPageChange={changePage}\n        containerClassName={\"paginationBttns\"}\n        previousLinkClassName={\"previousBttn\"}\n        nextLinkClassName={\"nextBttn\"}\n        disabledClassName={\"paginationDisabled\"}\n        activeClassName={\"paginationActive\"}\n      />\n\n    </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}